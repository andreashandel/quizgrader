quizid = stringr::str_replace("quiz1_student.xlsx","_student.xlsx","")
if( !(quizid %in% completequiz_ids))
{
errormsg = "Your submitted file has the wrong name, please do not rename the provided files."
show_error(errormsg)
return()
}
submission_original <- readxl::read_excel("../../Downloads/quiz1_student.xlsx", col_types = "text")
if (length(submission_original)==1) #if this is true, it means the read_excel failed and instead produced an error string
{
errormsg = "File could not be loaded, make sure it's a valid Excel file"
show_error(errormsg)
return()
}
#if submitted file could be loaded, process a bit
#replace any potential NA with "" for consistency
#also make a data frame instead of tibble
#this should work on any excel file (even if student submits a non-quiz)
#therefore do this before quiz format check
submission <- submission_original %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%
data.frame()
# load the solution file for this quiz with the answers
# test if it can be loaded
# for it to work the quizid in the submitted sheet must have a name that matches a solution
solutionname = paste0(completequizzes_folder,'/', quizid,'_complete.xlsx')
solution_raw <- try( readxl::read_excel(solutionname, col_types = "text"))
if (length(solution_raw)==1) #if this is true, it means the file hasn't loaded and instead produced an error string
{
errormsg = "Matching solution file could not be loaded. Please inform your instructor."
show_error(errormsg)
return()
}
#if loading worked, do a bit of cleaning
#replace any potential NA with "" for consistency
#also make a data frame instead of tibble
#this should work on any excel file (even if student submits a non-quiz)
#therefore do this before quiz format check
solution <- solution_raw %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%  #don't want NA, want empty string for consistentcy
data.frame()
#check submitted file against solution to make sure content is right
#if file is not right, check_submission will return an error message
#then display error message and stop the process
filecheck <- quizgrader::check_submission(submission, quizid)
#docerrors <- check_submission(submission,solution,studentid,quizid,gradelist)
if (!is.null(filecheck))
{
show_error(filecheck)
return()
}
#if all seems  ok, we can go ahead and grade
result_table <- grade_quiz(submission,solution)
# if an error occurs during grading, result_table will contain the error message as a string
if (is.character(result_table))
{
show_error(result_table)
return()
}
#compute score for submission
score = sum(result_table$Score == "Correct")/nrow(result_table)*100
#####################################
#write the submission to a file for record keeping
#####################################
#filename contains student email, date and quiz ID
#this allows checking if things in the app go wrong
#give each submission a time-stamp
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
#####################################
#write the submission to a file for record keeping
#####################################
#filename contains student email, date and quiz ID
#this allows checking if things in the app go wrong
#give each submission a time-stamp
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
filename = paste(input$StudentID, timestamp, quizid, 'submission.tsv', sep='_')
filename = paste(metadata$StudentID, timestamp, quizid, 'submission.tsv', sep='_')
filenamepath = paste0(studentsubmissions_folder,"/",filename)
write.table(submission, file=filenamepath, sep = '\t', col.names = TRUE, row.names = FALSE )
#####################################
#save student grade to gradelist file
#####################################
#saves new score in time-stamped gradelist file
#creates a new gradelist file with score recorded and current date
#returns nothing
#that extra if statement is to prevent recording for test submissions
#otherwise one always has to go in manually to delete submission to prevent 'already submitted' message
save_grade(score, input$StudentID, quizid, gradelists_folder)
#####################################
#save student grade to gradelist file
#####################################
#saves new score in time-stamped gradelist file
#creates a new gradelist file with score recorded and current date
#returns nothing
#that extra if statement is to prevent recording for test submissions
#otherwise one always has to go in manually to delete submission to prevent 'already submitted' message
save_grade(score, metadata$StudentID, quizid, gradelists_folder)
gradelist = read_gradelist(gradelists_folder)
gradecol = which(colnames(gradelist) == paste0(quizid,"_Grade"))
gradelist[studentid,gradecol] <- score
gradelist[metadata$studentid,gradecol] <- score
View(gradelist)
View(gradelist)
View(gradelist)
studentrow = which(gradelist[,"StudentID"] == studentid)
studentrow = which(gradelist[,"StudentID"] == metadata$StudentID)
gradelist[studentrow,gradecol] <- score
View(gradelist)
gradelist[studentrow,gradecol] <- as.character(score)
submitcol = which(colnames(gradelist) == paste0(quizid,"_SubmitDate"))
gradelist[studentrow,submitcol] <- as.character(Sys.time())
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
filename = paste0("gradelist_",timestamp,".tsv")
gradelistfile = paste0(gradelists_folder,"/",filename)
writexl::write_xlsx(gradelist, gradelistfile, col_names = TRUE, format_headers = TRUE)
library(quizgrader)
setwd("C:/Users/daile/Desktop/myfirsttest_server")
runApp()
runApp()
View(gradelist)
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/myfirsttest_server")
runApp()
library(quizgrader)
library(quizgrader)
setwd("C:/Users/daile/Desktop/myfirsttest_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
setwd("C:/Users/daile/Desktop/myfirsttest_server")
library('quizgrader')
library('magrittr') #explicitly load package so we can use pipe without package reference
submission_original <- NULL #the uploaded file
#paths to the different folders
gradelists_folder = ('./gradelists')
completequizzes_folder = ('./completequizzes')
studentsubmissions_folder = ('./studentsubmissions')
#names of all complete quizzes
completequiz_names = list.files(path = completequizzes_folder, recursive=FALSE, pattern = "\\.xlsx$", full.names = FALSE)
completequiz_ids = stringr::str_replace(completequiz_names,"_complete.xlsx","") #get only part that is name of quiz
show_error <- function(errormsg)
{
showModal(modalDialog(errormsg))
shinyjs::reset(id  = "loadfile")
shinyjs::disable(id = "submitbutton")
}
if (is.null(submission_original))
{
shinyjs::reset(id  = "loadfile") #clear out the file upload field
shinyjs::disable(id = "submitbutton")
}
output$resulttext <- NULL
output$statstext <- NULL
metadata = list()
metadata$StudentID = "canbeanything"
metadata$Password = "test123"
#read gradelist every time submit button is pressed to make sure it's the latest version
gradelist = quizgrader::read_gradelist(gradelists_folder)
#check that student ID and password are correct and can be matched with entry in gradelist
#if student is found, check name and password
metaerror <- quizgrader::check_metadata(metadata, gradelist)
if (!is.null(metaerror)) #if errors occur, stop the process with an error message
{
show_error(metaerror)
return()
}
quizid = "quiz1"
if( !(quizid %in% completequiz_ids))
{
errormsg = "Your submitted file has the wrong name, please do not rename the provided files."
show_error(errormsg)
return()
}
submission_original <- readxl::read_excel("../../Downloads/quiz1_student.xlsx", col_types = "text")
if (length(submission_original)==1) #if this is true, it means the read_excel failed and instead produced an error string
{
errormsg = "File could not be loaded, make sure it's a valid Excel file"
show_error(errormsg)
return()
}
#if submitted file could be loaded, process a bit
#replace any potential NA with "" for consistency
#also make a data frame instead of tibble
#this should work on any excel file (even if student submits a non-quiz)
#therefore do this before quiz format check
submission <- submission_original %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%
data.frame()
# load the solution file for this quiz with the answers
# test if it can be loaded
# for it to work the quizid in the submitted sheet must have a name that matches a solution
solutionname = paste0(completequizzes_folder,'/', quizid,'_complete.xlsx')
solution_raw <- try( readxl::read_excel(solutionname, col_types = "text"))
if (length(solution_raw)==1) #if this is true, it means the file hasn't loaded and instead produced an error string
{
errormsg = "Matching solution file could not be loaded. Please inform your instructor."
show_error(errormsg)
return()
}
#if loading worked, do a bit of cleaning
#replace any potential NA with "" for consistency
#also make a data frame instead of tibble
#this should work on any excel file (even if student submits a non-quiz)
#therefore do this before quiz format check
solution <- solution_raw %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%  #don't want NA, want empty string for consistentcy
data.frame()
#check submitted file against solution to make sure content is right
#if file is not right, check_submission will return an error message
#then display error message and stop the process
filecheck <- quizgrader::check_submission(submission, quizid)
#docerrors <- check_submission(submission,solution,studentid,quizid,gradelist)
if (!is.null(filecheck))
{
show_error(filecheck)
return()
}
#if all seems  ok, we can go ahead and grade
result_table <- grade_quiz(submission,solution)
# if an error occurs during grading, result_table will contain the error message as a string
if (is.character(result_table))
{
show_error(result_table)
return()
}
#compute score for submission
score = sum(result_table$Score == "Correct")/nrow(result_table)*100
#####################################
#write the submission to a file for record keeping
#####################################
#filename contains student email, date and quiz ID
#this allows checking if things in the app go wrong
#give each submission a time-stamp
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
filename = paste(input$StudentID, timestamp, quizid, 'submission.tsv', sep='_')
filename = paste(metadata$StudentID, timestamp, quizid, 'submission.tsv', sep='_')
filenamepath = paste0(studentsubmissions_folder,"/",filename)
write.table(submission, file=filenamepath, sep = '\t', col.names = TRUE, row.names = FALSE )
#####################################
#save student grade to gradelist file
#####################################
#saves new score in time-stamped gradelist file
#creates a new gradelist file with score recorded and current date
#returns nothing
#that extra if statement is to prevent recording for test submissions
#otherwise one always has to go in manually to delete submission to prevent 'already submitted' message
save_grade(score, input$StudentID, quizid, gradelists_folder)
#####################################
#save student grade to gradelist file
#####################################
#saves new score in time-stamped gradelist file
#creates a new gradelist file with score recorded and current date
#returns nothing
#that extra if statement is to prevent recording for test submissions
#otherwise one always has to go in manually to delete submission to prevent 'already submitted' message
save_grade(score, metadata$StudentID, quizid, gradelists_folder)
#####################################
#display results
#if no errors occurred during grading, show and record results
output$resulttable <- shiny::renderTable(result_table)
#show a success text
success_text = paste0("Your submission for quiz ",quizid," has been successfully graded and recorded.")
output$resulttext <- renderText(success_text)
#####################################
#also compute submission stats for student and display
#load the latest gradelist which contains the just submitted grade
# gradelist = read_gradelist(gradelists_folder)
#compute stats for that student
quizstats <- compute_student_stats(input$studentid, quizid, gradelist)
#####################################
#also compute submission stats for student and display
#load the latest gradelist which contains the just submitted grade
# gradelist = read_gradelist(gradelists_folder)
#compute stats for that student
quizstats <- compute_student_stats(metadata$studentid, quizid, gradelist)
#####################################
#also compute submission stats for student and display
#load the latest gradelist which contains the just submitted grade
# gradelist = read_gradelist(gradelists_folder)
#compute stats for that student
quizstats <- compute_student_stats(input$StudentID, quizid, gradelist)
#####################################
#also compute submission stats for student and display
#load the latest gradelist which contains the just submitted grade
# gradelist = read_gradelist(gradelists_folder)
#compute stats for that student
quizstats <- compute_student_stats(metadata$StudentID, quizid, gradelist)
#pull out all columns containing grades for this student
#those must have 'grade' in their name
studentrow = which(gradelist[,"StudentID"] == studentid)
#pull out all columns containing grades for this student
#those must have 'grade' in their name
studentrow = which(gradelist[,"StudentID"] == metadata$StudentID)
allquizgrades = gradelist[studentrow,grepl("grade", colnames(gradelist))]
View(gradelist)
allquizgrades = gradelist[studentrow,grepl("Grade", colnames(gradelist))]
#figure out column of current quiz, remove all future quizzes
thisquiz = which(names(allquizgrades) == paste0(quizid,'_Grade'))
#contains vector of quiz grades
quizgrades = allquizgrades[1:thisquiz]
# compute average of past quizzes
# for quizzes that are past that don't have an entry, enter a 0
numeric_grades = quizgrades
numeric_grades[quizgrades==""] <- 0
# with that 0 substitution, conversion to numeric should work
# if it doesn't the average will have an NA
# which indicates something went wrong
gradeaverage = mean(as.numeric(numeric_grades))
# compute total number quizzes done so far
totalquizzes = length(quizgrades)
# determine number of submitted quizzes
gradesubmissions = sum(quizgrades != "")
library(quizgrader)
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/myfirsttest_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
library(quizgrader)
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
runApp()
setwd("~/GitHub Projects/quizgrader")
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
library('quizgrader')
library('magrittr') #explicitly load package so we can use pipe without package reference
#######################################################
#general setup
#######################################################
submission_original <- NULL #the uploaded file
#paths to the different folders
gradelists_folder = ('./gradelists')
completequizzes_folder = ('./completequizzes')
studentsubmissions_folder = ('./studentsubmissions')
#names of all complete quizzes
completequiz_names = list.files(path = completequizzes_folder, recursive=FALSE, pattern = "\\.xlsx$", full.names = FALSE)
completequiz_ids = stringr::str_replace(completequiz_names,"_complete.xlsx","") #get only part that is name of quiz
#combine all inputs into list for checking
#make all inputs lower case
#note that list entries need this specific capitalization
metadata = list()
#combine all inputs into list for checking
#make all inputs lower case
#note that list entries need this specific capitalization
metadata = list(StudentID = "canbeanything", Password = "test123")
#read gradelist every time submit button is pressed to make sure it's the latest version
gradelist = quizgrader::read_gradelist(gradelists_folder)
#check that student ID and password are correct and can be matched with entry in gradelist
#if student is found, check name and password
metaerror <- quizgrader::check_metadata(metadata, gradelist)
if (!is.null(metaerror)) #if errors occur, stop the process with an error message
{
show_error(metaerror)
return()
}
#if student ID and password are a match,
#check that quizid part of file name of student submission
#matches one of the quizid file names of the complete solution files
quizid = stringr::str_replace(input$loadfile$name,"_student.xlsx","")
if( !(quizid %in% completequiz_ids))
{
errormsg = "Your submitted file has the wrong name, please do not rename the provided files."
show_error(errormsg)
return()
}
quizid = "quiz1"
if( !(quizid %in% completequiz_ids))
{
errormsg = "Your submitted file has the wrong name, please do not rename the provided files."
show_error(errormsg)
return()
}
submission_original <- readxl::read_excel("../../Downloads/quiz1_student.xlsx")
if (length(submission_original)==1) #if this is true, it means the read_excel failed and instead produced an error string
{
errormsg = "File could not be loaded, make sure it's a valid Excel file"
show_error(errormsg)
return()
}
#if submitted file could be loaded, process a bit
#replace any potential NA with "" for consistency
#also make a data frame instead of tibble
#this should work on any excel file (even if student submits a non-quiz)
#therefore do this before quiz format check
submission <- submission_original %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%
data.frame()
# load the solution file for this quiz with the answers
# test if it can be loaded
# for it to work the quizid in the submitted sheet must have a name that matches a solution
solutionname = paste0(completequizzes_folder,'/', quizid,'_complete.xlsx')
solution_raw <- try( readxl::read_excel(solutionname, col_types = "text"))
if (length(solution_raw)==1) #if this is true, it means the file hasn't loaded and instead produced an error string
{
errormsg = "Matching solution file could not be loaded. Please inform your instructor."
show_error(errormsg)
return()
}
#if loading worked, do a bit of cleaning
#replace any potential NA with "" for consistency
#also make a data frame instead of tibble
#this should work on any excel file (even if student submits a non-quiz)
#therefore do this before quiz format check
solution <- solution_raw %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%  #don't want NA, want empty string for consistentcy
data.frame()
#check submitted file against solution to make sure content is right
#if file is not right, check_submission will return an error message
#then display error message and stop the process
filecheck <- quizgrader::check_submission(submission, quizid)
#docerrors <- check_submission(submission,solution,studentid,quizid,gradelist)
if (!is.null(filecheck))
{
show_error(filecheck)
return()
}
#if all seems  ok, we can go ahead and grade
result_table <- grade_quiz(submission,solution)
# if an error occurs during grading, result_table will contain the error message as a string
if (is.character(result_table))
{
show_error(result_table)
return()
}
#compute score for submission
score = sum(result_table$Score == "Correct")/nrow(result_table)*100
#####################################
#write the submission to a file for record keeping
#####################################
#filename contains student email, date and quiz ID
#this allows checking if things in the app go wrong
#give each submission a time-stamp
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
filename = paste(input$StudentID, timestamp, quizid, 'submission.tsv', sep='_')
filename = paste(metadata$StudentID, timestamp, quizid, 'submission.tsv', sep = '_')
filenamepath = paste0(studentsubmissions_folder,"/",filename)
write.table(submission, file=filenamepath, sep = '\t', col.names = TRUE, row.names = FALSE )
#####################################
#save student grade to gradelist file
#####################################
#saves new score in time-stamped gradelist file
#creates a new gradelist file with score recorded and current date
#returns nothing
#that extra if statement is to prevent recording for test submissions
#otherwise one always has to go in manually to delete submission to prevent 'already submitted' message
save_grade(score, input$StudentID, quizid, gradelist, gradelists_folder)
#####################################
#save student grade to gradelist file
#####################################
#saves new score in time-stamped gradelist file
#creates a new gradelist file with score recorded and current date
#returns nothing
#that extra if statement is to prevent recording for test submissions
#otherwise one always has to go in manually to delete submission to prevent 'already submitted' message
save_grade(score, metadata$StudentID, quizid, gradelist, gradelists_folder)
studentrow = which(gradelist[,"StudentID"] == studentid)
studentrow = which(gradelist[,"StudentID"] == metadata$StudentID)
gradecol = which(colnames(gradelist) == paste0(quizid,"_Grade"))
gradelist[studentrow,gradecol] <- as.character(score)
View(gradelist)
submitcol = which(colnames(gradelist) == paste0(quizid,"_SubmitDate"))
gradelist[studentrow,submitcol] <- as.character(Sys.time())
attemptcol = which(colnames(gradelist) == paste0(quizid, "_Attempt"))
gradelist[studentrow, attemptcol]
is.na(gradelist[studentrow, attemptcol])
if(is.na(gradelist[studentrow, attemptcol])){
gradelist[studentrow, attemptcol] <- "1"
}else{
gradelist[studentrow, attemptcol] <- as.character(as.numeric(gradelist[studentrow, attemptcol])+1)
}
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
filename = paste0("gradelist_",timestamp,".xlsx")
gradelistfile = paste0(gradelists_folder,"/",filename)
writexl::write_xlsx(gradelist, gradelistfile, col_names = TRUE, format_headers = TRUE)
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
runApp('~/R/win-library/4.1/quizgrader/apps/quizmanager.R')
quizmanager()
?fs
?fs::path
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
