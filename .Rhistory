}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
ui <- shinyUI(
fluidPage(
selectInput("Student Name","Choose a student to view grades.",
choices = unique(paste0(simple.grades$Lastname, ", ", simple.grades$Firstname)),
selected = "Lastname, Firstname"),
DT::dataTableOutput("Student Grades")
)
)
server <- shinyServer(function(input, output, session) {
# reactiveData <- reactive({
#   return(simple.grades %>% filter(email == input$`Student Email`) %>% select(lastname, firstname, QuizID, duedate, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
#   })
reactiveData <- reactive({
return(simple.grades %>% filter(paste0(Lastname, ", ", Firstname) == input$`Student Name`)) #%>% select(Lastname, firstname, QuizID, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
})
output$`Student Grades` <- DT::renderDataTable({
return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
})
}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
library(shiny)
ui <- shinyUI(
fluidPage(
verbatimTextOutput("Class Summary from Classlist"),
DT::dataTableOutput("Class Summary by classlist")
)
)
server <- shinyServer(function(input, output, session) {
output$`Class Summary by classlist` <- DT::renderDataTable({
return(DT::datatable(grades.summary, class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
})
}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
ui <- shinyUI(
fluidPage(
selectInput("Student Name","Choose a student to view grades.",
choices = unique(paste0(simple.grades$Lastname, ", ", simple.grades$Firstname)),
selected = "Lastname, Firstname"),
DT::dataTableOutput("Student Grades")
)
)
server <- shinyServer(function(input, output, session) {
# reactiveData <- reactive({
#   return(simple.grades %>% filter(email == input$`Student Email`) %>% select(lastname, firstname, QuizID, duedate, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
#   })
reactiveData <- reactive({
return(simple.grades %>% filter(paste0(Lastname, ", ", Firstname) == input$`Student Name`) %>% select(Lastname, Firstname, QuizID, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
})
output$`Student Grades` <- DT::renderDataTable({
return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
})
}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
simple.grades <- simple.grades %>% add_row(.before = 1)
simple.grades
simple.grades[1,] <- toupper(names(simple.grades))
toupper(names(simple.grades))
simple.grades
simple.grades[1,1:ncol(simple.grades)] <- toupper(names(simple.grades))
simple.grades[1,1:ncol(simple.grades)] <- c(toupper(names(simple.grades)))
simple.grades[1,1:ncol(simple.grades)] <- list(toupper(names(simple.grades)))
simple.grades[1,] <- list(toupper(names(simple.grades)))
simple.grades[1,] <- as.list(toupper(names(simple.grades)))
simple.grades
ui <- shinyUI(
fluidPage(
selectInput("Student Name","Choose a student to view grades.",
choices = unique(paste0(simple.grades$Lastname, ", ", simple.grades$Firstname)),
selected = "LASTNAME, FIRSTNAME"),
DT::dataTableOutput("Student Grades")
)
)
server <- shinyServer(function(input, output, session) {
# reactiveData <- reactive({
#   return(simple.grades %>% filter(email == input$`Student Email`) %>% select(lastname, firstname, QuizID, duedate, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
#   })
reactiveData <- reactive({
return(simple.grades %>% filter(paste0(Lastname, ", ", Firstname) == input$`Student Name`) %>% select(Lastname, Firstname, QuizID, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
})
output$`Student Grades` <- DT::renderDataTable({
return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
})
}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
View(submissions)
which(grepl("q[0-9]{1,2}", names(submissions)))
names(submissions)
questions.summary <- lapply(questions, function(x){return(list(Number.Correct = sum(x=="Correct", na.rm = TRUE), Number.Responses = sum(!is.na(x)),Percentage.Correct = round(sum(x=="Correct", na.rm = TRUE)/sum(!is.na(x))*100, 2)))})
questions <- submissions[,which(grepl("q[0-9]{1,2}", names(submissions)))]
questions.summary <- lapply(questions, function(x){return(list(Number.Correct = sum(x=="Correct", na.rm = TRUE), Number.Responses = sum(!is.na(x)),Percentage.Correct = round(sum(x=="Correct", na.rm = TRUE)/sum(!is.na(x))*100, 2)))})
questionID <- names(questions.summary)
quizID <- gsub("(.+?)\\..*", "\\1", questionID)
quizID
questions.summary <- bind_cols(quizID = quizID, questionID = questionID, bind_rows(questions.summary))
ui <- shinyUI(
fluidPage(
selectInput("Quiz ID","Choose a Quiz ID to view a summary.",
choices = c("ALL", unique(questions.summary$quizID)),
selected = "ALL"),
DT::dataTableOutput("Questions Summary")
)
)
server <- shinyServer(function(input, output, session) {
reactiveData <- reactive({
if(input$`Quiz ID`=="ALL"){return(questions.summary)}else{return(subset(questions.summary, quizID == input$`Quiz ID`))}
})
output$`Questions Summary` <- DT::renderDataTable({
return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
})
}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
ui <- shinyUI(
fluidPage(
selectInput("Quiz ID","Choose a Quiz ID to view a summary.",
choices = c("ALL", unique(questions.summary$quizID)),
selected = "ALL"),
DT::dataTableOutput("Questions Summary")
)
)
server <- shinyServer(function(input, output, session) {
reactiveData <- reactive({
if(input$`Quiz ID`=="ALL"){return(questions.summary)}else{return(subset(questions.summary, quizID == input$`Quiz ID`))}
})
output$`Questions Summary` <- DT::renderDataTable({
return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
})
}
)
shinyApp(ui = ui, server = server, options = list(height = 1500) )
?selectInput
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
runApp('inst/apps/quizmanager.R')
View(simple.grades)
View(simple.grades)
View(submissions)
View(grades)
library(quizgrader)
quizmanager()
View(questions)
View(questions.summary)
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/quizgrader_testing_grounds/test_server")
runApp()
runApp('~/GitHub Projects/quizgrader/inst/apps')
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/quizgrader_testing_grounds/test_server")
runApp()
library(quizgrader)
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/Random/quizgrader_testing_grounds/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
quizmanager()
library(quizgrader)
quizmanager()
quizmanager()
setwd("C:/Users/daile/Desktop/Random/quizgrader_testing_grounds/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
quizmanager("C:/Users/daile/Desktop/Random/quizgrader_testing_grounds/test")
courselocation <- courselocation_global
course.summary <- quizgrader::summarize_course(courselocation)[["quizdf"]]
View(course.summary)
analyze_quizzes <- function(courselocation, grades_type="overview", duedate_filter=FALSE)
{
# aggregate all submissions to a single tibble
submissions <- quizgrader::compile_submissions(courselocation)
if(grades_type %in% c("overview", "student"))
{
# load course summary and studentlist to have complete data shell regardless of missing submissions
course.summary <- quizgrader::summarize_course(courselocation)[["quizdf"]]
studentlist <- readxl::read_xlsx(fs::dir_ls(fs::path(courselocation, "studentlists")), col_types = "text", col_names = TRUE)
grades.scaffold <- expand.grid(QuizID = course.summary$QuizID, StudentID = studentlist$StudentID)
grades <- dplyr::full_join(studentlist, dplyr::full_join(course.summary, grades.scaffold, by = "QuizID"), by = "StudentID")
# subset submissions df variables to include student indicators, quiz due dates, and variables for overall quiz stats: number of questions and number of correct responses
simple.grades <- submissions[, which(
names(submissions)%in%c("Lastname", "Firstname") |
grepl("\\.n\\.", names(submissions)) |
grepl("DueDate", names(submissions)))]
# iterate over quizzes to transform data from wide to long format
## quizIDs <- gsub("[.]n[.]questions", "", names(simple.grades)[which(grepl("[.]n[.]questions", names(simple.grades)))])
quizIDs <- course.summary$QuizID
long.data <- list()
for(i in 1:length(quizIDs)){
temp <- simple.grades[,c(1:2, which(grepl(quizIDs[i], names(simple.grades))))]
names(temp) <- gsub(paste0(quizIDs[i], "[.]"), "", names(temp))
if(ncol(temp)>2){
temp$grade <- as.numeric(temp$n.correct) / as.numeric(temp$n.questions) * 100
}
temp$QuizID <- quizIDs[i]
long.data[[i]] <- temp
}
simple.grades <- dplyr::bind_rows(long.data)
# due date filter
if(duedate_filter){
grades <- grades %>% dplyr::filter(DueDate<=Sys.Date())
}
# generate an overall grade taking simple average of each quiz grade
grades.summary <- dplyr::left_join(grades, simple.grades, by = c("Lastname", "Firstname", "QuizID")) %>%
dplyr::mutate(
grade.zeros = ifelse(is.na(grade), 0, as.numeric(grade)),
n.questions = as.numeric(n_Questions),
n.correct = ifelse(is.na(n.correct), 0, as.numeric(n.correct))
) %>%
dplyr::group_by(Lastname, Firstname) %>%
dplyr::summarise(
n.quizzes = dplyr::n(),
n.submitted = sum(!is.na(grade)),
n.missing = sum(is.na(grade)),
grade = paste0(round(mean(grade.zeros), 2)),
n.questions = paste0("TOTQs = ", sum(n.questions, na.rm = TRUE)),
n.correct = paste0("TOTcorrect = ", sum(n.correct, na.rm = TRUE))
) %>%
dplyr::ungroup() %>%
dplyr::mutate(
n.questions = paste0("TOTQs = ", max(as.numeric(gsub("[^0-9]{1-3}", "", n.questions)), na.rm=TRUE)),
by.question.avg = round(100*as.numeric(gsub("[^0-9]{1-3}", "", n.correct))/as.numeric(gsub("[^0-9]{1-3}", "", n.questions)), 2)
)
if(grades_type == "overview"){return(grades.summary)}
# ui <- shinyUI(
#   fluidPage(
#     verbatimTextOutput("Class Summary from Classlist"),
#     DT::dataTableOutput("Class Summary by classlist")
#   )
# )
#
#
# server <- shinyServer(function(input, output, session) {
#   output$`Class Summary by classlist` <- DT::renderDataTable({
#     return(DT::datatable(grades.summary, class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
#   })
# }
# )
## hard code add to line list grades for simple viewing of average alongside individual grades
simple.grades <- simple.grades %>% mutate(grade = round(grade, 2)) %>%
lapply(as.character) %>%
dplyr::bind_rows(grades.summary)  %>%
dplyr::arrange(Lastname, Firstname) %>%
dplyr::mutate_all(~as.character(.))
## add placeholder
simple.grades <- simple.grades %>% dplyr::add_row(.before = 1)
simple.grades[1,] <- as.list(toupper(names(simple.grades)))
if(grades_type == "student"){return(simple.grades)}
# ui <- shinyUI(
#   fluidPage(
#     selectInput("Student Name","Choose a student to view grades.",
#                 choices = unique(paste0(simple.grades$Lastname, ", ", simple.grades$Firstname)),
#                 selected = "LASTNAME, FIRSTNAME"),
#     DT::dataTableOutput("Student Grades")
#   )
# )
#
# server <- shinyServer(function(input, output, session) {
#   # reactiveData <- reactive({
#   #   return(simple.grades %>% filter(email == input$`Student Email`) %>% select(lastname, firstname, QuizID, duedate, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
#   #   })
#   reactiveData <- reactive({
#     return(simple.grades %>% filter(paste0(Lastname, ", ", Firstname) == input$`Student Name`) %>% select(Lastname, Firstname, QuizID, grade, n.questions, n.correct, by.q.avg, n.quizzes, n.submitted, n.missing))
#   })
#   output$`Student Grades` <- DT::renderDataTable({
#     return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
#   })
# }
# )
}
if(grades_type == "question"){
questions <- submissions[,which(grepl("q[0-9]{1,2}", names(submissions)))]
questions.summary <- lapply(questions, function(x){return(list(Number.Correct = sum(x=="Correct", na.rm = TRUE), Number.Responses = sum(!is.na(x)),Percentage.Correct = round(sum(x=="Correct", na.rm = TRUE)/sum(!is.na(x))*100, 2)))})
questionID <- names(questions.summary)
quizID <- gsub("(.+?)\\..*", "\\1", questionID)
questions.summary <- dplyr::bind_cols(quizID = quizID, questionID = questionID, dplyr::bind_rows(questions.summary))
# ui <- shinyUI(
#   fluidPage(
#     selectInput("Quiz ID","Choose a Quiz ID to view a summary.",
#                 choices = c("ALL", unique(questions.summary$quizID)),
#                 selected = "ALL"),
#     DT::dataTableOutput("Questions Summary")
#   )
# )
#
# server <- shinyServer(function(input, output, session) {
#   reactiveData <- reactive({
#     if(input$`Quiz ID`=="ALL"){return(questions.summary)}else{return(subset(questions.summary, quizID == input$`Quiz ID`))}
#   })
#   output$`Questions Summary` <- DT::renderDataTable({
#     return(DT::datatable(reactiveData(), class = "cell-border stripe", rownames = FALSE, filter = "top", extensions = "Buttons", options = list(dom = "Bfrtip", buttons = c("copy", "csv", "excel", "pdf", "print"), pageLength = 30)) )
#   })
# }
# )
}
}
temp <- analyze_quizzes(courselocation, "student")
dplyr::%>%
?dplyr::%>%
dplyr::`%>%`()
analyze_quizzes <- function(courselocation, grades_type="overview", duedate_filter=FALSE)
{
# aggregate all submissions to a single tibble
submissions <- quizgrader::compile_submissions(courselocation)
if(grades_type %in% c("overview", "student"))
{
# load course summary and studentlist to have complete data shell regardless of missing submissions
course.summary <- quizgrader::summarize_course(courselocation)[["quizdf"]]
studentlist <- readxl::read_xlsx(fs::dir_ls(fs::path(courselocation, "studentlists")), col_types = "text", col_names = TRUE)
grades.scaffold <- expand.grid(QuizID = course.summary$QuizID, StudentID = studentlist$StudentID)
grades <- dplyr::full_join(studentlist, dplyr::full_join(course.summary, grades.scaffold, by = "QuizID"), by = "StudentID")
# subset submissions df variables to include student indicators, quiz due dates, and variables for overall quiz stats: number of questions and number of correct responses
simple.grades <- submissions[, which(
names(submissions)%in%c("Lastname", "Firstname") |
grepl("\\.n\\.", names(submissions)) |
grepl("DueDate", names(submissions)))]
# iterate over quizzes to transform data from wide to long format
## quizIDs <- gsub("[.]n[.]questions", "", names(simple.grades)[which(grepl("[.]n[.]questions", names(simple.grades)))])
quizIDs <- course.summary$QuizID
long.data <- list()
for(i in 1:length(quizIDs)){
temp <- simple.grades[,c(1:2, which(grepl(quizIDs[i], names(simple.grades))))]
names(temp) <- gsub(paste0(quizIDs[i], "[.]"), "", names(temp))
if(ncol(temp)>2){
temp$grade <- as.numeric(temp$n.correct) / as.numeric(temp$n.questions) * 100
}
temp$QuizID <- quizIDs[i]
long.data[[i]] <- temp
}
simple.grades <- dplyr::bind_rows(long.data)
# due date filter
if(duedate_filter){
grades <-  dplyr::filter(grades, DueDate<=Sys.Date())
}
# generate an overall grade taking simple average of each quiz grade
grades.summary <- dplyr::left_join(grades, simple.grades, by = c("Lastname", "Firstname", "QuizID"))
grades.summary <- dplyr::mutate(grades.summary,
grade.zeros = ifelse(is.na(grade), 0, as.numeric(grade)),
n.questions = as.numeric(n_Questions),
n.correct = ifelse(is.na(n.correct), 0, as.numeric(n.correct))
)
grades.summary <- dplyr::group_by(grades.summary, Lastname, Firstname)
grades.summary <- dplyr::summarise(grades.summary,
n.quizzes = dplyr::n(),
n.submitted = sum(!is.na(grade)),
n.missing = sum(is.na(grade)),
grade = paste0(round(mean(grade.zeros), 2)),
n.questions = paste0("TOTQs = ", sum(n.questions, na.rm = TRUE)),
n.correct = paste0("TOTcorrect = ", sum(n.correct, na.rm = TRUE))
)
grades.summary <- dplyr::ungroup(grades.summary)
grades.summary <- dplyr::mutate(grades.summary,
n.questions = paste0("TOTQs = ", max(as.numeric(gsub("[^0-9]{1-3}", "", n.questions)), na.rm=TRUE)),
by.question.avg = round(100*as.numeric(gsub("[^0-9]{1-3}", "", n.correct))/as.numeric(gsub("[^0-9]{1-3}", "", n.questions)), 2)
)
if(grades_type == "overview"){return(grades.summary)}
## hard code add to line list grades for simple viewing of average alongside individual grades
simple.grades <-  mutate(simple.grades, grade = round(grade, 2))
simple.grades <-  lapply(simple.grades, as.character)
simple.grades <-  dplyr::bind_rows(simple.grades, grades.summary)
simple.grades <-  dplyr::arrange(simple.grades, Lastname, Firstname)
simple.grades <-  dplyr::mutate_all(simple.grades, ~as.character(.))
## add placeholder
simple.grades <- dplyr::add_row(simple.grades, .before = 1)
simple.grades[1,] <- as.list(toupper(names(simple.grades)))
if(grades_type == "student"){return(simple.grades)}
}
if(grades_type == "question"){
questions <- submissions[,which(grepl("q[0-9]{1,2}", names(submissions)))]
questions.summary <- lapply(questions, function(x){return(list(Number.Correct = sum(x=="Correct", na.rm = TRUE), Number.Responses = sum(!is.na(x)),Percentage.Correct = round(sum(x=="Correct", na.rm = TRUE)/sum(!is.na(x))*100, 2)))})
questionID <- names(questions.summary)
quizID <- gsub("(.+?)\\..*", "\\1", questionID)
questions.summary <- dplyr::bind_cols(quizID = quizID, questionID = questionID, dplyr::bind_rows(questions.summary))
}
}
temp <- analyze_quizzes(courselocation, "student")
analyze_quizzes <- function(courselocation, grades_type="overview", duedate_filter=FALSE)
{
# aggregate all submissions to a single tibble
submissions <- quizgrader::compile_submissions(courselocation)
if(grades_type %in% c("overview", "student"))
{
# load course summary and studentlist to have complete data shell regardless of missing submissions
course.summary <- quizgrader::summarize_course(courselocation)[["quizdf"]]
studentlist <- readxl::read_xlsx(fs::dir_ls(fs::path(courselocation, "studentlists")), col_types = "text", col_names = TRUE)
grades.scaffold <- expand.grid(QuizID = course.summary$QuizID, StudentID = studentlist$StudentID)
grades <- dplyr::full_join(studentlist, dplyr::full_join(course.summary, grades.scaffold, by = "QuizID"), by = "StudentID")
# subset submissions df variables to include student indicators, quiz due dates, and variables for overall quiz stats: number of questions and number of correct responses
simple.grades <- submissions[, which(
names(submissions)%in%c("Lastname", "Firstname") |
grepl("\\.n\\.", names(submissions)) |
grepl("DueDate", names(submissions)))]
# iterate over quizzes to transform data from wide to long format
## quizIDs <- gsub("[.]n[.]questions", "", names(simple.grades)[which(grepl("[.]n[.]questions", names(simple.grades)))])
quizIDs <- course.summary$QuizID
long.data <- list()
for(i in 1:length(quizIDs)){
temp <- simple.grades[,c(1:2, which(grepl(quizIDs[i], names(simple.grades))))]
names(temp) <- gsub(paste0(quizIDs[i], "[.]"), "", names(temp))
if(ncol(temp)>2){
temp$grade <- as.numeric(temp$n.correct) / as.numeric(temp$n.questions) * 100
}
temp$QuizID <- quizIDs[i]
long.data[[i]] <- temp
}
simple.grades <- dplyr::bind_rows(long.data)
# due date filter
if(duedate_filter){
grades <-  dplyr::filter(grades, DueDate<=Sys.Date())
}
# generate an overall grade taking simple average of each quiz grade
grades.summary <- dplyr::left_join(grades, simple.grades, by = c("Lastname", "Firstname", "QuizID"))
grades.summary <- dplyr::mutate(grades.summary,
grade.zeros = ifelse(is.na(grade), 0, as.numeric(grade)),
n.questions = as.numeric(n_Questions),
n.correct = ifelse(is.na(n.correct), 0, as.numeric(n.correct))
)
grades.summary <- dplyr::group_by(grades.summary, Lastname, Firstname)
grades.summary <- dplyr::summarise(grades.summary,
n.quizzes = dplyr::n(),
n.submitted = sum(!is.na(grade)),
n.missing = sum(is.na(grade)),
grade = paste0(round(mean(grade.zeros), 2)),
n.questions = paste0("TOTQs = ", sum(n.questions, na.rm = TRUE)),
n.correct = paste0("TOTcorrect = ", sum(n.correct, na.rm = TRUE))
)
grades.summary <- dplyr::ungroup(grades.summary)
grades.summary <- dplyr::mutate(grades.summary,
n.questions = paste0("TOTQs = ", max(as.numeric(gsub("[^0-9]{1-3}", "", n.questions)), na.rm=TRUE)),
by.question.avg = round(100*as.numeric(gsub("[^0-9]{1-3}", "", n.correct))/as.numeric(gsub("[^0-9]{1-3}", "", n.questions)), 2)
)
if(grades_type == "overview"){return(grades.summary)}
## hard code add to line list grades for simple viewing of average alongside individual grades
simple.grades <-  dplyr::mutate(simple.grades, grade = round(grade, 2))
simple.grades <-  lapply(simple.grades, as.character)
simple.grades <-  dplyr::bind_rows(simple.grades, grades.summary)
simple.grades <-  dplyr::arrange(simple.grades, Lastname, Firstname)
simple.grades <-  dplyr::mutate_all(simple.grades, ~as.character(.))
## add placeholder
simple.grades <- dplyr::add_row(simple.grades, .before = 1)
simple.grades[1,] <- as.list(toupper(names(simple.grades)))
if(grades_type == "student"){return(simple.grades)}
}
if(grades_type == "question"){
questions <- submissions[,which(grepl("q[0-9]{1,2}", names(submissions)))]
questions.summary <- lapply(questions, function(x){return(list(Number.Correct = sum(x=="Correct", na.rm = TRUE), Number.Responses = sum(!is.na(x)),Percentage.Correct = round(sum(x=="Correct", na.rm = TRUE)/sum(!is.na(x))*100, 2)))})
questionID <- names(questions.summary)
quizID <- gsub("(.+?)\\..*", "\\1", questionID)
questions.summary <- dplyr::bind_cols(quizID = quizID, questionID = questionID, dplyr::bind_rows(questions.summary))
}
}
temp <- analyze_quizzes(courselocation, "student")
View(temp)
temp <- analyze_quizzes(courselocation, "question")
View(temp)
library(quizgrader)
quizmanager("D:/Dropbox/2021-3-fall-MADA/quizzes/MADA2021")
install.packages('shinyFiles')
library(quizgrader)
library('dplyr')
install.packages('tidyverse')
install.packages('tidymodels')
install.packages('DSAIRM')
install.packages('shinyFiles')
install.packages('shinyjs')
install.packages('devtools')
install.packages('here')
install.packages('writexl')
library(quizgrader)
install.packages(c('pkdown','covr','emoji'))
library(quizgrader)
library(quizgrader)
quizmanager("D:/Dropbox/2021-3-fall-MADA/quizzes/MADA2021")
quizmanager("D:/Dropbox/2021-3-fall-MADA/quizzes/MADA2021/")
install.packages('DT')
library(quizgrader)
library(quizgrader)
quizmanager()
?file.remove
library('fs')
?fs
library(quizgrader)
library(quizgrader)
library(quizgrader)
quizmanager("D:/Dropbox/2021-3-fall-MADA/quizzes/MADA2021")
library(quizgrader)
quizmanager("D:/Dropbox/2021-3-fall-MADA/quizzes/MADA2021")
quizmanager("C:/data/Dropbox/2021-3-fall-MADA/quizzes/MADA2021")
install.packages(c("bayesplot", "bit", "brew", "brms", "Brobdingnag", "broom", "bslib", "callr", "cli", "collections", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "desc", "deSolve", "devtools", "digest", "distributional", "dplyr", "DSAIRM", "DT", "dtplyr", "emoji", "evaluate", "farver", "fontawesome", "forcats", "future", "gargle", "generics", "gert", "ggplot2", "ggridges", "gh", "gitcreds", "globals", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "languageserver", "lhs", "lifecycle", "listenv", "lubridate", "markdown", "matrixStats", "modelr", "nleqslv", "officer", "openssl", "parallelly", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "posterior", "processx", "ps", "purrr", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "reprex", "rlang", "rmarkdown", "roxygen2", "rstan", "rstudioapi", "rversions", "rvest", "sass", "scales", "shiny", "stringi", "stringr", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "vctrs", "viridisLite", "vroom", "whisker", "xfun", "XML", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bit", "brew", "brms", "Brobdingnag", "broom", "bslib", "callr", "cli", "collections", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "desc", "deSolve", "devtools", "digest", "distributional", "dplyr", "DSAIRM", "DT", "dtplyr", "emoji", "evaluate", "farver", "fontawesome", "forcats", "future", "gargle", "generics", "gert", "ggplot2", "ggridges", "gh", "gitcreds", "globals", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "languageserver", "lhs", "lifecycle", "listenv", "lubridate", "markdown", "matrixStats", "modelr", "nleqslv", "officer", "openssl", "parallelly", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "posterior", "processx", "ps", "purrr", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "reprex", "rlang", "rmarkdown", "roxygen2", "rstan", "rstudioapi", "rversions", "rvest", "sass", "scales", "shiny", "stringi", "stringr", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "vctrs", "viridisLite", "vroom", "whisker", "xfun", "XML", "xts", "yaml", "zip", "zoo"))
install.packages(c("curl", "httpuv", "ragg", "XML"))
install.packages('writexl')
install.packages('shinyFiles')
install.packages('covr')
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
options(rmarkdown.html_vignette.check_title = FALSE)
pkgdown::build_site()
pkgdown::build_site()
library(quizgrader)
