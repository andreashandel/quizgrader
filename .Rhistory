column(6, align = "center", "")
)
)
),
fluidRow(
column(12,
actionButton("Exit", "Exit", class="exitbutton")
),
class = "mainmenurow"
) #close fluidRow structure for input
), #close "Manage" tab
tabPanel("Analyze Submissions",  value = "analyze",
h2('Retrieve submissions'),
actionButton("retrieve", "Retrieve submissions from shiny server", class = "actionbutton"),
h2('Analyze submissions'),
actionButton("analyze", "Analyze submissions", class = "actionbutton"),
) #close "Analyze" tab
), #close NavBarPage
tagList( hr(),
p('All text and figures are licensed under a ',
a("Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.", href="http://creativecommons.org/licenses/by-nc-sa/4.0/", target="_blank"),
'Software/Code is licensed under ',
a("GPL-3.", href="https://www.gnu.org/licenses/gpl-3.0.en.html" , target="_blank")
,
br(),
"The development of this package was partially supported by TBD.",
align = "center", style="font-size:small") #end paragraph
) #end taglist
) #end fluidpage and UI part of app
# Run the application
shinyApp(ui = ui, server = server)
runApp('auxiliary/alternate_quizmanager.R')
library(quizgrader)
runApp('auxiliary/alternate_quizmanager.R')
runApp('auxiliary/alternate_quizmanager.R')
runApp('auxiliary/alternate_quizmanager.R')
?updateNavlistPanel()
runApp('auxiliary/alternate_quizmanager.R')
library(quizgrader)
quizmanager()
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
setwd("~/GitHub Projects/quizgrader")
runApp('auxiliary/alternate_quizmanager.R')
load("C:/Users/daile/OneDrive - University of Georgia/Github Projects/gradingapp/submissions.rdata")
View(submissions)
library(shiny); runApp('auxiliary/alternate_quizmanager.R')
ui <- fluidPage(
tabsetPanel(
id = "wizard",
type = "hidden",
tabPanel("page_1",
"Welcome!",
actionButton("page_12", "next")
),
tabPanel("page_2",
"Only one page to go",
actionButton("page_21", "prev"),
actionButton("page_23", "next")
),
tabPanel("page_3",
"You're done!",
actionButton("page_32", "prev")
)
)
)
server <- function(input, output, session) {
switch_page <- function(i) {
updateTabsetPanel(inputId = "wizard", selected = paste0("page_", i))
}
observeEvent(input$page_12, switch_page(2))
observeEvent(input$page_21, switch_page(1))
observeEvent(input$page_23, switch_page(3))
observeEvent(input$page_32, switch_page(2))
}
shinyApp(ui = ui, server = server)
runApp('auxiliary/alternate_quizmanager.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/alternate_quizmanager.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
?isolate
runApp('auxiliary/playground.R')
?toggle
?observeEvent
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/alternate_quizmanager.R')
runApp('auxiliary/alternate_quizmanager.R')
?updateActionButton
library(shiny); runApp('auxiliary/alternate_quizmanager.R')
dir()
dir("..")
dir("../..")
dir("../../..")
dir("../../../Desktop")
fs::dir_exists("../../../Desktop/test")
fs::dir_create("../../../Desktop/test")
?shinyjs::reset()
library(quizgrader)
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
?shiny::navbarPage()
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('inst/apps/quizmanager.R')
setwd("C:/Users/daile/Desktop/test_server")
runApp()
runApp()
QuestionID	Score
quiz1q1	Correct
quiz1q2	Correct
quiz1q3	Correct
quiz1q4	Correct
quiz1q5	Correct
quiz1q6	Correct
quiz1q7	Correct
test <- readClipboard()
test
?readClipboard()
test1 <- strsplit(test, "\t")
test1
unlist(test1)
rbind(test1)
dplyr::bind_rows(test1)
?dplyr::bind_rows(test1)
purrr::pluck(test1, 1)
seq(1, 16, by = 2)
seq(2, 16, by = 2)
test2 <- data.frame(QuestionID = test1[seq(3, 16, by = 2)])
test2 <- data.frame(QuestionID = unlist(lapply(seq(3, 16, by = 2), function(x){purrr::pluck(test1, x)})))
test2
test2 <- data.frame(QuestionID = unlist(test1)[seq(3,16, by = 2)])
test1
test2
test2 <- data.frame(QuestionID = unlist(test1)[seq(3,16, by = 2)], Score = unlist(test1)[seq(4,16, by = 2)])
test2
tidyr::pivot_wider(test2, names_from = "QuestionID", values_from = "Score")
setwd("~/GitHub Projects/quizgrader")
?list.files()
grepl(paste0("canbeanything", "_.*?_", "quiz1", "_submission[.]tsv"), "canbeanything_2021_06_10_16_08_21_quiz1_submission.tsv")
dir()
dir("../../..")
dir("../../../Desktop/test_server")
dir("../../../Desktop/test_server/studentsubmissions")
list.files(path = fs::path("../../../Desktop/test_server/studentsubmissions", "quiz1"), pattern = paste0("canbeanything", "_.*?_", "quiz1", "_submission[.]tsv"))
Sys.Date()
class(Sys.Date())
class(as.characterSys.Date()))
class(as.character(Sys.Date()))
as.character(Sys.Date())=="2021-06-14"
Sys.Date()=="2021-06-14"
Sys.Date()>"2021-06-14"
Sys.Date()>"2021-06-13"
Sys.Date()>"2021-06-15"
3 >= "3"
3 >= "4"
3 >= "2"
dir()
getwd()
test2
tidyr::pivot_wider(test2, names_from = "QuestionID", values_from = "Score")
test3 <- tidyr::pivot_wider(test2, names_from = "QuestionID", values_from = "Score")
dir("../../../Desktop")
write.table(test3, file = "../../../Desktop/test_table.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE)
dir()
list.files(pattern = "meh")
length(list.files(pattern = "meh"))
grepl(paste0("log", studentid, "_.*?_", quizid, ".*?[.]txt"), "log_canbeanything_quiz1_attempt_1.txt")
grepl(paste0("log", "canbeanything", "_.*?_", "quiz1", ".*?[.]txt"), "log_canbeanything_quiz1_attempt_1.txt")
grepl(paste0("log_", "canbeanything", "_", "quiz1", ".*?[.]txt"), "log_canbeanything_quiz1_attempt_1.txt")
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test1_server")
runApp()
setwd("~/GitHub Projects/quizgrader/inst/apps")
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test1_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
dir("../../../Desktop/test1_server/submissions")
dir("../../../Desktop/test1_server")
dir("../../../Desktop/test1_server/studentsubmissions")
dir("../../../Desktop/test1_server/studentsubmissions")
list.files("../../../Desktop/test1_server/studentsubmissions", pattern = paste0("log_", studentid, ".*?[.]txt"), recursive = TRUE)
list.files("../../../Desktop/test1_server/studentsubmissions", pattern = paste0("log_", canbeanything, ".*?[.]txt"), recursive = TRUE)
list.files("../../../Desktop/test1_server/studentsubmissions", pattern = paste0("log_", "canbeanything", ".*?[.]txt"), recursive = TRUE)
list.files("../../../Desktop/test1_server/studentsubmissions", pattern = paste0("log_", "canbeanything", ".*?[.]txt"), recursive = TRUE, full.names = TRUE)
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
getwd()
dir()
log_files <- list.files(path = "./studentsubmissions",
pattern = paste0("log_", "canbeanything", ".*?[.]txt"),
recursive = TRUE,
full.names = TRUE
)
log_files
gsub(".*?log_(.*?)[.]txt", "\\1", log_files)
strsplit(gsub(".*?log_(.*?)[.]txt", "\\1", log_files), split = "_")
lapply(strsplit(gsub(".*?log_(.*?)[.]txt", "\\1", log_files), split = "_"), purrr::pluck, c(1,2,4))
?purrr::pluck()
?strsplit
strsplit(gsub(".*?log_(.*?)[.]txt", "\\1", log_files), split = "_")
keys <- strsplit(gsub(".*?log_(.*?)[.]txt", "\\1", log_files), split = "_")
keys
sapply(keys, c)
setNames(t(sapply(keys, c))[, -3], nm = c("StudentID", "QuizID", "Attempt"))
sapply(keys, c)
t(sapply(keys, c))
t(sapply(keys, c))[-3]
matrix(t(sapply(keys, c)))[-3]
as.matrix(t(sapply(keys, c)))[-3]
as.data.frame(t(sapply(keys, c)))
data.frame(t(sapply(keys, c)))
?data.frame
setNames(t(sapply(keys, c)), c("StudentID", "QuizID", "a", "Attempt"))
data.frame(t(sapply(keys, c)))
data.frame(t(sapply(keys, c)))[-3]
setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt"))
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%group_by(QuizID)%>%filter(which.max(Attempt))
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%dplyr::group_by(QuizID)%>%dplyr::filter(which.max(Attempt))
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%dplyr::group_by(QuizID)%>%dplyr::filter(Attempt ==which.max(Attempt))
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%dplyr::group_by(QuizID)%>%dplyr::filter(Attempt == which.max(Attempt))
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%dplyr::group_by(QuizID)%>%dplyr::filter(Attempt == which.max(Attempt)) %>% dplyr::ungroup()
dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%dplyr::group_by(QuizID)%>%dplyr::filter(Attempt == which.max(Attempt)) %>% dplyr::ungroup()
test <- dplyr::bind_cols(setNames(data.frame(t(sapply(keys, c)))[-3], nm = c("StudentID", "QuizID", "Attempt")), file = log_files)%>%dplyr::group_by(QuizID)%>%dplyr::filter(Attempt == which.max(Attempt)) %>% dplyr::ungroup()
test['file']
log_df <- lapply(filename_keys_df["file"], read.delim)
log_df <- lapply(test["file"], read.delim)
getwd()
dir()
read.delim(test$file[1])
log_df <- sapply(test["file"], read.delim)
read.delim(test["file"][1])
test["file"][1]
test %>% data.frame()
test %>% data.frame() %>% class()
test %<>% data.frame()
log_df <- sapply(test["file"], read.delim)
read.delim(test["file"])
read.delim(test["file"][1])
dir()
test["file"]
test["file"][1]
read.delim(test["file"][1])
class(test$file)
class(test["file"][1])
class(test$file[1])
lapply(test["file"], class)
lapply(test$file, class)
lapply(test$file, read.delim)
lapply(test$file, read.delim) %>% dplyr::bind_rows()
lapply(test$file, read.delim)[[1]]
lapply(test$file, read.delim)[[1]] %>% tidyr::pivot_longer(cols = 5:ncol(.), names_to = "QuestionID", values_to = "Answer")
lapply(test$file, read.delim)[[1]] %>% dplyr::select(-Score) %>% tidyr::pivot_longer(cols = 5:ncol(.), names_to = "QuestionID", values_to = "Score")
lapply(test$file, read.delim)[[1]]
grepl(".*?q[0-9].*?", names(lapply(test$file, read.delim)[[1]]))
which(grepl(".*?q[0-9].*?", names(lapply(test$file, read.delim)[[1]])))
lapply(test$file, read.delim)[[1]] %>% dplyr::select(-Score) %>% tidyr::pivot_longer(cols = which(grepl(".*?q[0-9].*?", names(lapply(test$file, read.delim)[[1]]))), names_to = "QuestionID", values_to = "Score")
lapply(test$file, read.delim)[[1]] %>% dplyr::select(-Score) %>% tidyr::pivot_longer(cols = which(grepl(".*?q[0-9].*?", names(lapply(.)))), names_to = "QuestionID", values_to = "Score")
lapply(test$file, read.delim)[[1]] %>% dplyr::select(-Score) %>% tidyr::pivot_longer(cols = which(grepl(".*?q[0-9].*?", names(lapply(test$file, read.delim)[[1]])))-1, names_to = "QuestionID", values_to = "Score")
lapply(test$file, read.delim)[[1]] %>% dplyr::select(-Score) %>% tidyr::pivot_longer(cols = which(grepl(".*?q[0-9].*?", names(.))), names_to = "QuestionID", values_to = "Score")
lapply(test$file, function(.file){
.df <- read.delim(file = .file) %>%
dplyr::select(-Score) %>%
tidyr::pivot_longer(cols = which(grepl(".*?q[0-9].*?", names(.))),
names_to = "QuestionID",
values_to = "Score"
)
}) %>%
dplyr::bind_rows()
lapply(test$file, function(.file){
.df <- read.delim(file = .file) %>%
dplyr::select(StudentID, QuizID, Score) %>%
}) %>%
dplyr::bind_rows()
lapply(test$file, function(.file){
.df <- read.delim(file = .file) %>%
dplyr::select(StudentID, QuizID, Score)
}) %>%
dplyr::bind_rows()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
library(quizgrader)
setwd("~/GitHub Projects/quizgrader")
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
dir()
completequizzes_folder = "./completequizzes"
#names of all complete quizzes
completequiz_files = list.files(path = completequizzes_folder,
pattern = "\\.xlsx$",
recursive=FALSE,
full.names = FALSE)
completequiz_files
completequiz_df <- lapply(completequiz_files,
function(.file)
{
.quiz <- readxl::read_xlsx(.file, col_types = "text")
}
)
#names of all complete quizzes
completequiz_files = list.files(path = completequizzes_folder,
pattern = "\\.xlsx$",
recursive=FALSE,
full.names = TRUE)
completequiz_df <- lapply(completequiz_files,
function(.file)
{
.quiz <- readxl::read_xlsx(.file, col_types = "text")
}
)
completequiz_df
# read each one and extract quizid, number of questions, due date, number of attempts
# then, put all summaries into a dataframe
summary_df <- lapply(completequiz_files,
function(.file)
{
.quiz <- readxl::read_xlsx(.file, col_types = "text")
.quiz_summary <- data.frame(QuizID = .quiz$QuizID[1],
n_Questions = nrow(.quiz),
DueDate = .quiz$DueDate[1],
Attempts = .quiz$Attempts[1]
)
return(.quiz_summary)
}
) %>%
bind_rows() %>%
data.frame()
summary_df
runApp('~/GitHub Projects/quizgrader/auxiliary/playground.R')
runApp('~/GitHub Projects/quizgrader/auxiliary/playground.R')
runApp('~/GitHub Projects/quizgrader/auxiliary/playground.R')
library(quizgrader)
library(quizgrader)
?shiny::tabPanel()
?shiny::fluidRow
2+(-1)
2+-1
2++1
library(shiny); runApp('inst/apps/quizmanager.R')
runApp('inst/apps/quizmanager.R')
runApp('inst/apps/quizmanager.R')
runApp('inst/apps/quizmanager.R')
runApp('inst/apps/quizmanager.R')
?shiny::p()
?p()
runApp('inst/apps/quizmanager.R')
?shiny::tabPanel
runApp('inst/apps/quizmanager.R')
runApp('auxiliary/playground.R')
runApp('auxiliary/playground.R')
runApp('inst/apps/quizmanager.R')
runApp('inst/apps/quizmanager.R')
runApp('inst/apps/quizmanager.R')
shinyjs::reset()
?shinyjs::reset()
dir()
dir("../../../Desktop")
dir("../../../Desktop/empty")
list.files("../../../Desktop/empty")
test <- list.files("../../../Desktop/empty")
lapply(test, print)
is.null(lapply(test, print))
length(lapply(test, print))
dplyr::bind_rows(lapply(test, print))
data.frame(dplyr::bind_rows(lapply(test, print)))
length(data.frame(dplyr::bind_rows(lapply(test, print))))
nrow(data.frame(dplyr::bind_rows(lapply(test, print))))
paste("Currently, there are no quizzes associated with this course.")
is.character(paste("Currently, there are no quizzes associated with this course."))
is.character(data.frame(dplyr::bind_rows(lapply(test, print))))
runApp('inst/apps/quizmanager.R')
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
grepl("course_summary.*?[.]xlsx$", "course_summary.xlsx")
grepl("course_summary.*?[.]xlsx$", "quiz1_complete.xlsx")
?|>
"test"|>print()
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
setwd("C:/Users/daile/Desktop/test_server")
setwd("~/GitHub Projects/quizgrader")
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
setwd("~/GitHub Projects/quizgrader")
quizmanager()
setwd("~/GitHub Projects/quizgrader/inst/apps")
setwd("~/GitHub Projects/quizgrader")
Sys.time()
Sys.Date()
as.character(Sys.Date())
data.frame(StudentID = NA,
QuizID = NA,
Attempt = NA,
Score = NA,
n_Questions = NA,
n_Correct = NA,
Submit_Date = NA
)
submissions_log <- data.frame(StudentID = NA,
QuizID = NA,
Attempt = NA,
Score = NA,
n_Questions = NA,
n_Correct = NA,
Submit_Date = NA
)
library(quizgrader)
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
library(quizgrader)
runApp()
?dplyr::mutate_all
runApp('~/GitHub Projects/quizgrader/inst/apps')
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
rlang::last_error()
dir()
quizgrader::read_submissions_log("./studentsubmissions")
runApp()
quizgrader::read_submissions_log("./studentsubmissions")
dir()
dir('./studentsubmissions')
length(dir('./studentsubmissions'))
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
?dplyr::n()
runApp()
runApp()
runApp()
quizmanager()
library(quizgrader)
setwd("C:/Users/daile/Desktop/test_server")
setwd("~/GitHub Projects/quizgrader")
quizmanager()
setwd("C:/Users/daile/Desktop/test_server")
runApp()
library(quizgrader)
