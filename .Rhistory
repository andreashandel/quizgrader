library(quizgrader)
install.packages("shinyFiles")
install.packages("writexl")
library(quizgrader)
library(instal)
install.packages("installr")
installr::check.for.updates.R()
installr::updater()
library(quizgrader)
library(devtools)
has_devel()
quizmanager()
quizmanager()
setwd("C:/Users/daile/Desktop/myfirsttest_server")
runApp()
library('quizgrader')
library('magrittr') #explicitly load package so we can use pipe without package reference
submission_original <- NULL #the uploaded file
#paths to the different folders
gradelists_folder = ('./gradelists')
completequizzes_folder = ('./completequizzes')
studentsubmissions_folder = ('./studentsubmissions')
#names of all complete quizzes
completequiz_names = list.files(path = completequizzes_folder, recursive=FALSE, pattern = "\\.xlsx$", full.names = FALSE)
completequiz_ids = stringr::str_replace(completequiz_names,"_complete.xlsx","") #get only part that is name of quiz
show_error <- function(errormsg)
{
showModal(modalDialog(errormsg))
shinyjs::reset(id  = "loadfile")
shinyjs::disable(id = "submitbutton")
}
metadata = list()
metadata$StudentID = "canbeanything"
metadata$Password = "test123"
gradelist = quizgrader::read_gradelist(gradelists_folder)
metaerror <- quizgrader::check_metadata(metadata, gradelist)
(!is.null(metaerror))
quizid = stringr::str_replace("quiz1_student.xlsx", "_student.xlsx", "")
( !(quizid %in% completequiz_ids))
getwd()
dir()
dir("..")
dir("../..")
dir("../../Downloads")
submission_original <- readxl::read_excel("../../Downloads/quiz1_student.xlsx", col_types = "text")
(length(submission_original)==1)
submission <- submission_original %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%
data.frame()
solutionname = paste0(completequizzes_folder,'/', quizid,'_complete.xlsx')
solution_raw <- try( readxl::read_excel(solutionname, col_types = "text"))
(length(solution_raw)==1)
solution <- solution_raw %>%
dplyr::mutate_all(~ tidyr::replace_na(.x, "")) %>%  #don't want NA, want empty string for consistentcy
data.frame()
filecheck <- quizgrader::check_submission(submission, quizid)
result_table <- grade_quiz(submission,solution)
grade_quiz()
grade_quiz(submission = submission, solution = solution)
grade_table = data.frame(RecordID = solution$RecordID, Score = "Not correct")
names(solution)
solution
names(solution)
names(submission)
grade_quiz <-  function(submission, solution)
{
#grade each question
#set up data frame that will hold both the question number and the correct/not correct evaluation
#start by labeling answer as not correct
#then based on checks below, overwrite by declaring it correct
grade_table = data.frame(QuestionID = solution$QuestionID, Score = "Not correct")
#run through each row of submitted sheet, compare answer with solution
#for this to work, the submitted and solution file need to have exactly the same structure
for (n in 1:nrow(solution))
{
#browser()
#save answer and submission in their own variables for easier processing
true_answer = solution$Answer[n]
submitted_answer = submission$Answer[n]
#record type of answer, treat accordingly
answertype = solution$Type[n]
#these answer types are allowed. Throw an error message if it's not one of those.
allowed_types = c("Character", "Text", "Logical", "Integer", "Rounded_Numeric", "Numeric")
if (!(answertype %in% allowed_types))
{
grade_table <- "The solution sheet contains a non-allowed answer type. Please alert the instructor of this problem."
return(grade_table)
}
#expect single letter, only evaluate 1st entry in submission
if (answertype == "Character")
{
#convert any character to lower case
#for submission, trim any white-space before and after
#then keep only first character
true_answer = tolower(true_answer)
submitted_answer = substr(trimws(tolower(submitted_answer)),1,1)
if (submitted_answer == true_answer) {grade_table[n,2]="Correct"}
}
#expect some text
#currently, match by requiring the submitted text contains the answer
#so if the answer is "hello" and the student submits "this is hello world" it would be
#grade as ok
#could be changed
if (answertype == "Text")
{
#convert any character to lower case
#for submission, trim any white-space before and after
true_answer = tolower(true_answer)
submitted_answer = trimws(tolower(submitted_answer))
#match for substring
#if (grepl(true_answer, submitted_answer, fixed = TRUE)) {grade_table[n,2]="Correct"}
#below is for exact match
if (submitted_answer == true_answer) {grade_table[n,2]="Correct"}
}
#expect either Yes/No or True/False
if (answertype == "Logical")
{
#convert to false/no to 0 and true/yes to 1 in both answer sheet and submission
#convert any character to lower case
answer_numeric = 99 #set to some 'wrong' value, which needs to be changed
if (tolower(true_answer)=="yes" | tolower(true_answer)=="true" | true_answer=="1") {answer_numeric = 1}
if (tolower(true_answer)=="no" | tolower(true_answer)=="false" | true_answer=="0") {answer_numeric = 0}
#this means the solution file contains a wrong entry, an error message is triggered
if (answer_numeric == 99)
{
grade_table <- paste0("The solution sheet contains a wrong entry for question ",solution$QuestionID[n],". Please alert the instructor of this problem.")
return(grade_table)
}
submission_numeric = 99 #set to a 'wrong' value so if student enters neither y/t/1 or n/f/0 (as 1st letter) things evaluate to 'not correct'
#for submission, convert to lower case, trim any white-space before and after
#also only look at first letter, if it's y or t we assume student entered yes or true.
submitted_answer = substr(trimws(tolower(submitted_answer)),1,1)
if (submitted_answer == "y" | submitted_answer == "t" | submitted_answer=="1") {submission_numeric = 1}
if (submitted_answer == "n" | submitted_answer == "f" | submitted_answer=="0") {submission_numeric = 0}
if (submission_numeric == answer_numeric) {grade_table[n,2]="Correct"}
}
#expect integer
#in case students don't provide an integer, round to nearest value, then do strict compare
if (answertype == "Integer")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
true_answer = as.numeric(true_answer)
submitted_answer = round(as.numeric(submitted_answer),0)
if (submitted_answer==true_answer) {grade_table[n,2] = "Correct"}
}
}
#expect rounded integer, allow +/-1 value in case students don't know how to round
if (answertype == "Fuzzy_Integer")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
true_answer = as.numeric(true_answer)
submitted_answer = as.numeric(submitted_answer)
#check that submitted value is either true_answer or true_answer-1 or true_answer+1
if  (submitted_answer==true_answer | submitted_answer==(true_answer+1) | submitted_answer==(true_answer-1)) {grade_table[n,2] = "Correct"}
}
}
if (answertype == "Numeric")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
true_answer = as.numeric(true_answer)
submitted_answer = as.numeric(submitted_answer)
if (submitted_answer == true_answer) {grade_table[n,2] = "Correct"}
}
}
#expect rounded to the same digits as in the answer
#do the rounding as needed
if (answertype == "Rounded_Numeric")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
digits = nchar(strsplit(true_answer, "\\.")[[1]][2]) #get the number of digits after the period in answer, so we can round solution to same
true_answer = as.numeric(true_answer)*10^digits #convert to integer
submitted_answer = round(as.numeric(submitted_answer)*10^digits,0) #convert to what should be an integer if given with the right digits, then round
#allow mistake in student rounding
if  (abs(submitted_answer-true_answer) < 2) {grade_table[n,2] = "Correct"}
}
}
} #end loop over all answers
return(grade_table)
}
grade_quiz(submission, solution)
solution
grade_quiz <-  function(submission, solution)
{
#grade each question
#set up data frame that will hold both the question number and the correct/not correct evaluation
#start by labeling answer as not correct
#then based on checks below, overwrite by declaring it correct
grade_table = data.frame(QuestionID = solution$QuestionID, Score = "Not correct")
#run through each row of submitted sheet, compare answer with solution
#for this to work, the submitted and solution file need to have exactly the same structure
for (n in 1:nrow(solution))
{
#browser()
#save answer and submission in their own variables for easier processing
true_answer = solution$Answer[n]
submitted_answer = submission$Answer[n]
#record type of answer, treat accordingly
answertype = solution$Type[n]
#these answer types are allowed. Throw an error message if it's not one of those.
allowed_types = c("Character", "Text", "Logical", "Integer", "Fuzzy_Integer", "Numeric", "Rounded_Numeric")
if (!(answertype %in% allowed_types))
{
grade_table <- "The solution sheet contains a non-allowed answer type. Please alert the instructor of this problem."
return(grade_table)
}
#expect single letter, only evaluate 1st entry in submission
if (answertype == "Character")
{
#convert any character to lower case
#for submission, trim any white-space before and after
#then keep only first character
true_answer = tolower(true_answer)
submitted_answer = substr(trimws(tolower(submitted_answer)),1,1)
if (submitted_answer == true_answer) {grade_table[n,2]="Correct"}
}
#expect some text
#currently, match by requiring the submitted text contains the answer
#so if the answer is "hello" and the student submits "this is hello world" it would be
#grade as ok
#could be changed
if (answertype == "Text")
{
#convert any character to lower case
#for submission, trim any white-space before and after
true_answer = tolower(true_answer)
submitted_answer = trimws(tolower(submitted_answer))
#match for substring
#if (grepl(true_answer, submitted_answer, fixed = TRUE)) {grade_table[n,2]="Correct"}
#below is for exact match
if (submitted_answer == true_answer) {grade_table[n,2]="Correct"}
}
#expect either Yes/No or True/False
if (answertype == "Logical")
{
#convert to false/no to 0 and true/yes to 1 in both answer sheet and submission
#convert any character to lower case
answer_numeric = 99 #set to some 'wrong' value, which needs to be changed
if (tolower(true_answer)=="yes" | tolower(true_answer)=="true" | true_answer=="1") {answer_numeric = 1}
if (tolower(true_answer)=="no" | tolower(true_answer)=="false" | true_answer=="0") {answer_numeric = 0}
#this means the solution file contains a wrong entry, an error message is triggered
if (answer_numeric == 99)
{
grade_table <- paste0("The solution sheet contains a wrong entry for question ",solution$QuestionID[n],". Please alert the instructor of this problem.")
return(grade_table)
}
submission_numeric = 99 #set to a 'wrong' value so if student enters neither y/t/1 or n/f/0 (as 1st letter) things evaluate to 'not correct'
#for submission, convert to lower case, trim any white-space before and after
#also only look at first letter, if it's y or t we assume student entered yes or true.
submitted_answer = substr(trimws(tolower(submitted_answer)),1,1)
if (submitted_answer == "y" | submitted_answer == "t" | submitted_answer=="1") {submission_numeric = 1}
if (submitted_answer == "n" | submitted_answer == "f" | submitted_answer=="0") {submission_numeric = 0}
if (submission_numeric == answer_numeric) {grade_table[n,2]="Correct"}
}
#expect integer
#in case students don't provide an integer, round to nearest value, then do strict compare
if (answertype == "Integer")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
true_answer = as.numeric(true_answer)
submitted_answer = round(as.numeric(submitted_answer),0)
if (submitted_answer==true_answer) {grade_table[n,2] = "Correct"}
}
}
#expect rounded integer, allow +/-1 value in case students don't know how to round
if (answertype == "Fuzzy_Integer")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
true_answer = as.numeric(true_answer)
submitted_answer = as.numeric(submitted_answer)
#check that submitted value is either true_answer or true_answer-1 or true_answer+1
if  (submitted_answer==true_answer | submitted_answer==(true_answer+1) | submitted_answer==(true_answer-1)) {grade_table[n,2] = "Correct"}
}
}
if (answertype == "Numeric")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
true_answer = as.numeric(true_answer)
submitted_answer = as.numeric(submitted_answer)
if (submitted_answer == true_answer) {grade_table[n,2] = "Correct"}
}
}
#expect rounded to the same digits as in the answer
#do the rounding as needed
if (answertype == "Rounded_Numeric")
{
#make sure answer and submission can be converted to numeric
#if not, this will produce NA and the rest of the if statement won't be evaluated
#this means the original "Not Correct" score will remain.
if ( !is.na(suppressWarnings(as.numeric(true_answer))) && !is.na(suppressWarnings(as.numeric(submitted_answer))) )
{
digits = nchar(strsplit(true_answer, "\\.")[[1]][2]) #get the number of digits after the period in answer, so we can round solution to same
true_answer = as.numeric(true_answer)*10^digits #convert to integer
submitted_answer = round(as.numeric(submitted_answer)*10^digits,0) #convert to what should be an integer if given with the right digits, then round
#allow mistake in student rounding
if  (abs(submitted_answer-true_answer) < 2) {grade_table[n,2] = "Correct"}
}
}
} #end loop over all answers
return(grade_table)
}
grade_quiz(submission, solution)
library(quizgrader)
getwd()
runApp()
library(quizgrader)
quizmanager()
setwd("C:/Users/daile/Desktop/myfirsttest_server")
runApp()
result_table <- grade_quiz(submission,solution)
(is.character(result_table))
score = sum(result_table$Score == "Correct")/nrow(result_table)*100
timestamp = gsub(" ","_",gsub("-","_", gsub(":", "_", Sys.time())))
runApp()
View(gradelist)
which(colnames(gradelist) == paste0(quizid,"_grade"))
View(gradelist)
which(colnames(gradelist) == paste0(quizid,"_Grade"))
